
#
# def peel_the_potatoes():
#     expected_potatoes = int(input('Ile ziemniaków chcesz na obiad? '))
#     potatoes = []
#     while len(potatoes) < expected_potatoes:
#         print('Obieram ziemniaka')
#         print('Wrzucam do garnka')
#         potatoes.append('Ziemniak')
#     print(potatoes)
#
#
#
# def make_soup():
#     print('Jest zupa')
#
# peel_the_potatoes()
# make_soup()

# def put_a_brick():
#     print('-', sep="", end="")
#
# def build_a_wall():
#     wall_length = 10
#     for brick in range(wall_length):
#         put_a_brick()
#     print()
# build_a_wall()
#
# def build_a_longer_wall():
#     wall_length = 30
#     for brick in range(wall_length):
#         put_a_brick()
#     print()
#
# build_a_longer_wall()

# def function_with_params(something, something_else):
#     print(something)
#     print(something_else)
    # print(something + something_else)

# function_with_params(1, 4)
# function_with_params('Napis', 4)
# list_example = ['Lista', 'z', 'elementami']
# dict_example = {'KLucz': 'Wartość'}
# function_with_params(list_example, dict_example)

# def put_a_brick():
#     print('-', sep="", end="")
#
# def build_a_wall(wall_length):
#     for brick in range(wall_length):
#         put_a_brick()
#     print()
#
# build_a_wall(20)
# build_a_wall(5)
# build_a_wall(45)

# def calculate_investment_value(initial_value, percentage, years):
#     investment_value =  initial_value * (1 + percentage / 100) ** years
#     # print(f'Po {years} latach twoja lokata będzie warta {investment_value:.2f}')
#     return investment_value
#
# print('Kalkulator wartości lokaty z roczną kapitalizacją')
#
# initial_value_input = input('Jaką kwotę wpłaciłeś? ')
# initial_value = float(initial_value_input)
# percentage_input = input('Jakie jest oprocentowanie? ')
# percentage = float(percentage_input)
# years_input = input('Ile trwa lokata? ')
# years = int(years_input)
#
# final_value = calculate_investment_value(initial_value, percentage, years)
# print(f'Po {years} latach twoja lokata będzie wynosić {final_value:.2f}')
#
# longer_term = years * 2
# altetnative_value = calculate_investment_value(initial_value, percentage, longer_term)
# print(f'Po {longer_term} latach twoja lokata będzie wynosić {altetnative_value:.2f}')

# def calculate_alternative_investment_value(initial_value, percentage, years):
#     investment_value =  initial_value * (1 + percentage / 100) ** years
#     print(f'Po {years} latach twoja lokata będzie warta {investment_value:.2f}')
# calculate_alternative_investment_value(initial_value, percentage, 2 * years)

# def say_hello():
#     print('Hello World')
#
# hello_result = say_hello()
# print(hello_result)
#
# def ask_for_int_value(message):
#     input_value = input(message)
#     return int(input_value)
#
# def calculate_investment_value(initial_value, percentage, years):
#     result =  initial_value * (1 + percentage / 100) ** years
#     return result
#
# def run_investment_calculator():
#     print('Kalkulator wartości lokaty z roczną kapitalizacją')
#
#     initial_value = ask_for_int_value('Jaką kwotę wpłaciłeś? ')
#     percentage = ask_for_int_value('Jakie jest oprocentowanie? ')
#     years = ask_for_int_value('Ile trwa lokata? ')
#
#     final_value = calculate_investment_value(initial_value, percentage, years)
#     print(f'Po {years} latach twoja lokata będzie wynosić {final_value:.2f}')
#
# option = None
# while option != 'X':
#     run_investment_calculator()
#     option = input('Aby przerwać wpisz "X", wprowadź inny znak aby dokonać obliczeń dla innych wartości ')

def find_best_grade(grades_by_subject):
    best_subject = None
    best_grade = 0
    for subject, grades in grades_by_subject.items():
        best_grade_from_subject = max(grades)
        if best_grade_from_subject > best_grade:
            best_grade = best_grade_from_subject
            best_subject =subject
    return best_grade, best_subject

grades_data = {
    'Historia': [5, 5, 4, 5],
    'Matematyka': [5, 4, 3, 6],
    'Fizyka': [4, 3, 2, 5]
}
the_best_grade, subject = find_best_grade(grades_data)
print(f'Najlepsza uzyskana ocena to {the_best_grade} z {subject}')

result = find_best_grade(grades_data)
print(result[0])
print(type(result))

# def zapytaj_o_inta(wiadomość):
#     input_value = input(wiadomość)
#     return int(input_value)
#
# def wzór(bok_a, bok_b):
#     equation = bok_a * bok_b
#     return equation
#
# def pole_powierzchni():
#     print('Liczenie pola powierzchni prostokąta')
#     bok_a = zapytaj_o_inta('Jaka jest długość boku a? ')
#     bok_b = zapytaj_o_inta('Jaka jest długośc boku b? ')
#     print(f'Pole tego prostokąta wynosi {wzór(bok_a, bok_b)}')
#
# pole_powierzchni()
#
# def wzór_na_średnią_prędkość(droga, czas):
#     speed =  droga / czas
#     return speed
#
# def average_speed():
#     droga = zapytaj_o_inta("Jaka jest przebyta droga? (km) ")
#     czas = zapytaj_o_inta('W jakim czasie została ona przebyta? (h) ')
#     print(f'Średnia prędkość dla {pojazd} wynosi {wzór_na_średnią_prędkość(droga, czas):.2f} km/h')
#
# lista_pojazdów = ['bieg', 'rower', 'auto']
#
# for pojazd in lista_pojazdów:
#     print(f'Policzona zostanie teraz średnia prędkość dla "{pojazd}"')
#     average_speed()
#

print('Kalkulator budżetu miesięcznego')

def load_expenditures(category_name):
    expenditures_values = []
    while True:
        expenditure = input(f'Podaj wartośc następnego wydatku w kategorii {category_name} albo zakończ wpisując "X": ')
        if expenditure == "X":
            return expenditures_values
        expenditures_value = float(expenditure)
        expenditures_values.append(expenditures_value)

def load_expenditures_by_categories():
    expenditures = {}
    while True:
        category_name = input('Podaj kategorię wydatków albo zakończ wpisując "X": ')
        if category_name == 'X':
            return expenditures
        expenditures[category_name] = load_expenditures(category_name)

def calculate_total_expenditures(expenditures):
    result = 0
    for category_expenditures in expenditures.values():
        result += sum(category_expenditures)
    return result

def calculate_expenditures_percentages(expenditures, total_expenditures):
    percentages_by_category_name = {}
    for category_name, category_expenditures in expenditures.items():
        total_category_expenditures = sum(category_expenditures)
        percentages_by_category_name[category_name] = total_category_expenditures / total_expenditures * 100
    return percentages_by_category_name

def find_most_important_category(percentages_by_category_name):
    highest_percentage_category = None
    highest_percentage = 0
    for category, percentage in percentages_by_category_name.items():
        if percentage > highest_percentage:
            highest_percentage = percentage
            highest_percentage_category = category
    return highest_percentage_category, highest_percentage

def print_most_important_category_info(category_name, percentage):
    print(f'Najwięcej wydajesz na {category_name} - {percentage:.2f}% wszystkich wydatków')

def print_category_info(category, percentage):
    print(f'Na {category} wydajesz {percentage:.2f}% miesięcznych wydatków')

expenditures_by_categories = load_expenditures_by_categories()
total_expenditures = calculate_total_expenditures(expenditures_by_categories)
expenditures_percentage = calculate_expenditures_percentages(expenditures_by_categories, total_expenditures)
most_important_category, most_important_category_percentage = find_most_important_category(expenditures_percentage)

if most_important_category is not None:
    print_most_important_category_info(most_important_category, most_important_category_percentage)

for category, percentage in expenditures_percentage.items():
    print_category_info(category, percentage)


# def add_two_number(first_num, second_num):
#     print(f'first_num: {first_num}')
#     print(f'second_num: {second_num}')
#     return first_num + second_num
#
# print(add_two_number(2, 5))
# print(add_two_number(5, 2))

def calculate_investment_value(initial_value, percentage, years):
    result = initial_value * (1 + percentage / 100) ** years
    return result

initial = 1000
percentage = 5
years = 4
# final_value = calculate_investment_value(percentage, years, initial) # to jest zła kolejność więc wartość będzie z kosmosu
# print(f'Po {years} latach twoja lokata będzie warta {final_value:.2f}')
#
# final_value = calculate_investment_value(1000, 5, 4) # średnio czytelne co te wartości znaczą
# print(f'Po {years} latach twoja lokata będzie warta {final_value:.2f}')

final_value = calculate_investment_value(initial_value=1000, percentage=5, years=4) # argumenty w dowolnej kolejności jeśli są nazwane
print(f'Po {years} latach twoja lokata będzie warta {final_value:.2f}')

final_value = calculate_investment_value(initial_value=initial, percentage=percentage, years=years) # argumenty w dowolnej kolejności jeśli są nazwane
print(f'Po {years} latach twoja lokata będzie warta {final_value:.2f}')

final_value = calculate_investment_value(initial, percentage=percentage, years=years)
# można łączyć argumenty pozycyjne i nazwane ale trzeba w odpowiedniej kolejności, wszystkie pozycyjne musza być przed nazwanymi


def zapytaj_o_inta(wiadomość):
    input_value = input(wiadomość)
    return int(input_value)
def average_speed(droga, czas):
    return droga / czas


droga_bieg = 20
czas_bieg = 3
droga_rower = 30
czas_rower = 2
droga_samochód = 120
czas_samochód = 1.5
print(f'Średni czas biegu wynosi {average_speed(droga=droga_bieg, czas=czas_bieg):.2f} km/h')
print(f'Średni czas jazdy na rowerze wynosi {average_speed(droga=30, czas=2):.2f} km/h')
print(f'Średni czas jazdy samochodem wynosi {average_speed(droga=120, czas=1.5):.2f} km/h')



# def average_speed():
#     droga = zapytaj_o_inta("Jaka jest przebyta droga? (km) ")
#     czas = zapytaj_o_inta('W jakim czasie została ona przebyta? (h) ')
#     print(f'Średnia prędkość dla {pojazd} wynosi {wzór_na_średnią_prędkość(droga, czas):.2f} km/h')
#
# lista_pojazdów = ['bieg', 'rower', 'auto']
#
# for pojazd in lista_pojazdów:
#     print(f'Policzona zostanie teraz średnia prędkość dla "{pojazd}"')
#     average_speed()


# def avg_speed(distance, time):
#     result = distance / time
#     print('Nic nie zwracam')
#
# avg_speed(30, 2)
# print(result)

# def avg_speed(time):
#     result = distance / time
#     return result
# distance = 20
# time_in_hours = 2
# print(avg_speed(time_in_hours))

# def calculat_avg_speed():
#     distance = 20
#     time_in_hours = 2
#     print(avg_speed(time_in_hours))
#
# calculat_avg_speed()
# print(distance)

## print(value)
# value = 5
# print(value)

# def print_global_name():
#     print(name)
# # print_global_name()
# name = 'Mikołaj'
# print_global_name()

# def failed_modify_global_name():
#     name = "Kuba"
#     print(f'Wewnątrz funkcji {name}')
#
# name = 'Mikołaj'
# print(f'Przed funkcją {name}')
# failed_modify_global_name()
# print(f'Po funkcji {name}')

# def success_modify_global_name():
#     global name
#     name = "Kuba"
#     print(f'Wewnątrz funkcji {name}')
#
# name = 'Mikołaj'
# print(f'Przed funkcją {name}')
# success_modify_global_name()
# print(f'Po funkcji {name}')

PI_NUMBER = 3.141
def circle_area(radius):
    return PI_NUMBER * radius * radius
print(circle_area(radius=30))